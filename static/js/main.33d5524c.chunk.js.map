{"version":3,"sources":["Navigation/logo.svg","serviceWorker.js","TodoApp/TodoForm.js","TodoApp/useInputState.js","TodoApp/TodoList.js","TodoApp/TodoApp.js","TodoApp/useTodoState.js","Navigation/NavBar.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","TodoForm","saveTodo","useState","value","setValue","onChange","event","target","reset","useInputState","className","onSubmit","preventDefault","TextField","id","style","margin","placeholder","InputLabelProps","shrink","TodoList","todos","deleteTodo","List","map","todo","index","ListItem","key","toString","dense","button","Checkbox","tabIndex","disableRipple","color","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","onClick","TodoApp","initialValue","setTodos","addTodo","todoText","todoIndex","newTodos","filter","_","useTodoState","Container","maxWidth","Paper","trimmedText","trim","length","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","MainPage","classes","useTheme","React","open","setOpen","CssBaseline","AppBar","position","clsx","Toolbar","edge","Typography","variant","noWrap","Drawer","anchor","paper","direction","Divider","ListItemIcon","src","logo","alt","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33d5524c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./useInputState\";\r\n\r\nconst TodoForm = ({ saveTodo }) => {\r\n  const { value, reset, onChange } = useInputState();\r\n\r\n  return (\r\n    <form\r\n      className=\"TodoForm\"\r\n      onSubmit={event => {\r\n        event.preventDefault();\r\n        saveTodo(value);\r\n        reset();\r\n      }}\r\n    >\r\n      <TextField\r\n        id=\"standard-full-width\"\r\n        style={{ margin: 8 }}\r\n        placeholder=\"Add Todo items here...\"\r\n        margin=\"normal\"\r\n        InputLabelProps={{\r\n          shrink: true\r\n        }}\r\n        onChange={onChange}\r\n        value={value}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;","import { useState } from 'react';\r\n\r\nexport default () => {\r\n  const [value, setValue] = useState('');\r\n\r\n  return {\r\n    value,\r\n    onChange: event => {\r\n      setValue(event.target.value);\r\n    },\r\n    reset: () => setValue('')\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst TodoList = ({ todos, deleteTodo }) => (\r\n  <List className=\"TodoList\">\r\n    {todos.map((todo, index) => (\r\n      <ListItem key={index.toString()} dense button>\r\n        <Checkbox tabIndex={-1} disableRipple color=\"primary\" />\r\n        <ListItemText primary={todo} />\r\n        <ListItemSecondaryAction>\r\n          <IconButton\r\n            aria-label=\"Delete\"\r\n            onClick={() => {\r\n              deleteTodo(index);\r\n            }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport TodoList from \"./TodoList\";\r\nimport useTodoState from \"./useTodoState\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst TodoApp = () => {\r\n  const { todos, addTodo, deleteTodo } = useTodoState([]);\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\">\r\n        <Paper>\r\n          <TodoForm\r\n            saveTodo={todoText => {\r\n              const trimmedText = todoText.trim();\r\n              if (trimmedText.length > 0) {\r\n                addTodo(trimmedText);\r\n              }\r\n            }}\r\n          />\r\n          <TodoList todos={todos} deleteTodo={deleteTodo} />\r\n        </Paper>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoApp;","import { useState } from 'react';\r\n\r\nexport default initialValue => {\r\n  const [todos, setTodos] = useState(initialValue);\r\n\r\n  return {\r\n    todos,\r\n    addTodo: todoText => {\r\n      setTodos([...todos, todoText]);\r\n    },\r\n    deleteTodo: todoIndex => {\r\n      const newTodos = todos.filter((_, index) => index !== todoIndex);\r\n\r\n      setTodos(newTodos);\r\n    }\r\n  };\r\n};","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nimport TodoApp from '../TodoApp/TodoApp';\r\nimport logo from './logo.svg';\r\nimport '../styles.css';\r\n\r\n\r\nconst drawerWidth = 320;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function MainPage() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleDrawerOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleDrawerClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Todo List App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <InboxIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"GitHub\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <InboxIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Code Sandbox\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <MailIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Google Sites\" />\r\n          </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </List>\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <TodoApp />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport MainPage from './Navigation/NavBar';\n\nimport \"./styles.css\";\n\nfunction App() {\n    return (\n      <div className=\"App\">\n          <MainPage />\n      </div>\n    );\n  }\n  \n  const rootElement = document.getElementById(\"root\");\n  ReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}